{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1tOqpicL83bDpdQEI7Rsqbaj2WwDUyN8C",
      "authorship_tag": "ABX9TyMjzYRLAWVs3Xe0nYQu7EjR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Yuhwan0650/linear_algebra2_git/blob/%EC%A0%84%EC%9C%A0%ED%99%98/1%EC%A3%BC%EC%B0%A8%20%EC%8B%A4%EC%8A%B5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "파이썬 기초\n"
      ],
      "metadata": {
        "id": "Xcewj-WvXfR-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "NegrUOmGXnWo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "프린트"
      ],
      "metadata": {
        "id": "Ql-PBC_KXbys"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Epr4rWD-RV2K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "25e498c5-7db7-4d97-ae73-c8cba4817628"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, world\n",
            "정수: 3, 03, 003, 0003, 00003\n",
            "실수: 256, 256.1, 256.12\n",
            "문자열: [Hello, world]\n"
          ]
        }
      ],
      "source": [
        "print (\"Hello, world\")\n",
        "\n",
        "x=3\n",
        "print(\"정수: %01d, %02d, %03d, %04d, %05d\"\n",
        "  %(x, x, x, x, x))\n",
        "\n",
        "x=256.123\n",
        "print(\"실수: %.0f, %.1f, %.2f\"\n",
        "  %(x, x, x))\n",
        "\n",
        "x=\"Hello, world\"\n",
        "print(\"문자열: [%s]\" %(x))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "반복문, 조건문\n"
      ],
      "metadata": {
        "id": "6kAEf7VFXdlB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "contents=[\"Regression\", \"Classification\", \"SVM\", \"Clustering\", \"Dimension reduction\", \"NN\", \"CNN\", \"AE\", \"GAN\", \"RNN\"]\n",
        "\n",
        "for con in contents:\n",
        "  if con in [\"Regression\", \"Classification\", \"SVM\", \"Clustering\", \"Dimension reduction\"]:\n",
        "    print(\"%s은(는) 기계학습 내용입니다.\" %con)\n",
        "  elif con in [\"CNN\"]:\n",
        "    print(\"%s은(는) convolutional neural network 입니다.\" %con)\n",
        "  else:\n",
        "    print(\"%s은(는) 심층학습 내용입니다.\"%con)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5AJv-TVGZWjo",
        "outputId": "f5ae892d-d0ab-4b81-e4fc-b2b94d13253f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Regression은(는) 기계학습 내용입니다.\n",
            "Classification은(는) 기계학습 내용입니다.\n",
            "SVM은(는) 기계학습 내용입니다.\n",
            "Clustering은(는) 기계학습 내용입니다.\n",
            "Dimension reduction은(는) 기계학습 내용입니다.\n",
            "NN은(는) 심층학습 내용입니다.\n",
            "CNN은(는) convolutional neural network 입니다.\n",
            "AE은(는) 심층학습 내용입니다.\n",
            "GAN은(는) 심층학습 내용입니다.\n",
            "RNN은(는) 심층학습 내용입니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "반복문과 인덱스"
      ],
      "metadata": {
        "id": "LKG40XeVaDVp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for (i,con) in enumerate(contents):\n",
        "  print(\"[%d/%d]: %s\" %(i, len(contents), con))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bdu9m1iBZz_g",
        "outputId": "a9bb5080-cf23-4864-e7e3-e4ff4c41d311"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0/10]: Regression\n",
            "[1/10]: Classification\n",
            "[2/10]: SVM\n",
            "[3/10]: Clustering\n",
            "[4/10]: Dimension reduction\n",
            "[5/10]: NN\n",
            "[6/10]: CNN\n",
            "[7/10]: AE\n",
            "[8/10]: GAN\n",
            "[9/10]: RNN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "함수"
      ],
      "metadata": {
        "id": "odR9yX3vacIY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sum(a,b):\n",
        "  return a+b\n",
        "\n",
        "x=10.0\n",
        "y=20.0\n",
        "print(\"%.1f+%.1f=%.1f\"%(x,y,sum(x,y)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LgFc8VX4ada6",
        "outputId": "14ef922d-7190-4b71-aeb0-8fd18728d19b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10.0+20.0=30.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "리스트"
      ],
      "metadata": {
        "id": "3IZ9CEaiaq7_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=[]\n",
        "b=[1,2,3]\n",
        "c=[\"Hello\", \",\", \"world\"]\n",
        "d=[1,2,3,\"x\",\"y\",\"z\"]\n",
        "x=[]\n",
        "print(x)\n",
        "\n",
        "x.append('a')\n",
        "print(x)\n",
        "\n",
        "x.append(123)\n",
        "print(x)\n",
        "\n",
        "x.append([\"a\",\"b\"])\n",
        "print (x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ues-8YlQawRR",
        "outputId": "32c283f2-7fa4-4892-b48b-05209d49fb34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n",
            "['a']\n",
            "['a', 123]\n",
            "['a', 123, ['a', 'b']]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "딕셔너리"
      ],
      "metadata": {
        "id": "uAUbeZHXbIgT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dic=dict()\n",
        "dic[\"name\"]=\"Daesik\"\n",
        "dic[\"town\"]=\"Yongin city\"\n",
        "dic[\"job\"]=\"Assistant professor\"\n",
        "print(dic)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H-Gc593cbA9C",
        "outputId": "5ca96c36-c1fa-453f-b548-dec8322f2853"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'name': 'Daesik', 'town': 'Yongin city', 'job': 'Assistant professor'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "클래스"
      ],
      "metadata": {
        "id": "R8munpxWbYpZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Student:\n",
        "  def __init__(self, name):\n",
        "    self.name=name\n",
        "\n",
        "  def study(self, hard=False):\n",
        "    if hard:\n",
        "      print(\"%s 학생은 열심히 공부합니다.\" %self.name)\n",
        "    else:\n",
        "      print(\"%s 학생은 공부합니다.\" %self.name)\n",
        "\n",
        "s= Student('Daesik')\n",
        "s.study()\n",
        "s.study(hard=True)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9boB45ZtbZkv",
        "outputId": "588be12e-8b9e-405d-9951-abcf5fd531dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Daesik 학생은 공부합니다.\n",
            "Daesik 학생은 열심히 공부합니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. 백터, 행렬 연산, 그래프 그리기**"
      ],
      "metadata": {
        "id": "GoCKi8cQcuHE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "프린트"
      ],
      "metadata": {
        "id": "f1j_HZKAc8Rm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from ast import increment_lineno\n",
        "import numpy as np\n",
        "\n",
        "def print_val(x):\n",
        "  print(\"Type:\", type(x))\n",
        "  print(\"Shape:\", x.shape)\n",
        "  print(\"값:\\n:\", x)\n",
        "  print(\" \")\n",
        "\n",
        "#실습9\n",
        "x=np.array([1,2,3])\n",
        "print_val(x)\n",
        "\n",
        "x[0]=5\n",
        "print_val(x)\n",
        "\n",
        "#시\n",
        "y=np.array([[1,2,3], [4,5,6]])\n",
        "print_val(y)\n",
        "\n",
        "a=np.ones((3,2))\n",
        "print_val(a)\n",
        "\n",
        "a=np.zeros((2,2))\n",
        "print_val(a)\n",
        "\n",
        "a=np.eye(3,3)\n",
        "print_val(a)\n",
        "\n",
        "#실습10\n",
        "a=np.random.random((4,4))\n",
        "print_val(a)\n",
        "\n",
        "a=np.random.randn(4,4)\n",
        "print_val(a)\n",
        "\n",
        "#실습11\n",
        "a=np.array([[1,2,3,4], [5,6,7,8],[9,10,11,12]])\n",
        "print_val(a)\n",
        "\n",
        "b=a[:2, 1:3]\n",
        "print_val(b)\n",
        "\n",
        "row1=a[1, :]\n",
        "print_val(row1)\n",
        "\n",
        "#실습 12\n",
        "m1=np.array([[1,2], [3,4]], dtype=np.float64)\n",
        "m2=np.array([[5,6], [7,8]], dtype=np.float64)\n",
        "\n",
        "#실습 13\n",
        "##elementwise difference\n",
        "print_val(m1-m2)\n",
        "print_val(np.subtract(m1,m2))\n",
        "\n",
        "##elementwise product\n",
        "print_val(m1*m2)\n",
        "print_val(np.multiply(m1,m2))\n",
        "\n",
        "#실습 14\n",
        "##elementwise division\n",
        "print_val(m1/m2)\n",
        "print_val(np.divide(m1, m2))\n",
        "\n",
        "##elementwise square root\n",
        "print_val(np.sqrt(m1))\n",
        "\n",
        "#실습 15\n",
        "m1=np.array([[1,2], [3,4]])\n",
        "m2=np.array([[5,6], [7,8]])\n",
        "v1=np.array([9,10])\n",
        "v2=np.array([11,12])\n",
        "\n",
        "print_val(m1)\n",
        "print_val(m2)\n",
        "print_val(v1)\n",
        "print_val(v2)\n",
        "\n",
        "#실습 16\n",
        "print_val(v1.dot(v2))\n",
        "print_val(np.dot(v1,v2))\n",
        "\n",
        "#실습 17\n",
        "print_val(m1.dot(v1))\n",
        "print_val(np.dot(m1,v1))\n",
        "\n",
        "#실습 18\n",
        "print_val(m1.dot(m2))\n",
        "print_val(np.dot(m1,m2))\n",
        "\n",
        "#실습 19\n",
        "print_val(m1)\n",
        "print_val(m1.T)\n",
        "\n",
        "#실습 20\n",
        "print_val(np.sum(m1))\n",
        "print_val(np.sum(m1, axis=0))\n",
        "print_val(np.sum(m1, axis=1))\n",
        "#실습 21\n",
        "m1=np.array([[1,2,3], [4,5,6]])\n",
        "print(m1)\n",
        "print(m1.shape)\n",
        "\n",
        "print(np.sum(m1))\n",
        "print(np.sum(m1, axis=0))\n",
        "print(np.sum(m1, axis=1))\n",
        "\n",
        "#실습 22\n",
        "m1=np.array([[1,2,3],\n",
        "             [4,5,6],\n",
        "             [7,8,9],\n",
        "             [10,11,12]])\n",
        "m2=np.zeros_like(m1)\n",
        "print_val(m1)\n",
        "print_val(m2)\n",
        "\n",
        "#실습 23\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "x=np.arange(0,10,0.1)\n",
        "y=np.sin(x)\n",
        "\n",
        "plt.plot(x,y)\n",
        "\n",
        "#실습 24\n",
        "y_sin=np.sin(x)\n",
        "y_cos=np.cos(x)\n",
        "\n",
        "plt.plot(x, y_sin)\n",
        "plt.plot(x, y_cos)\n",
        "plt.xlabel('x axis label')\n",
        "plt.ylabel('y axis label')\n",
        "plt.title('sin and cos')\n",
        "plt.legend(['sin', 'cos'])\n",
        "\n",
        "plt.show()\n",
        "#실습 25\n",
        "plt.subplot(2,1,1)\n",
        "plt.plot(x, y_sin)\n",
        "plt.title('sin')\n",
        "\n",
        "plt.subplot(2,1,2)\n",
        "plt.plot(x, y_cos)\n",
        "plt.title('cos')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "bISmjW4-c9SJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}